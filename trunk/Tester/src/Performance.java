
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import lejos.nxt.Motor;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * performance.java
 *
 * Created on 15/07/2011, 21:20:57
 */



/**
 *
 * @author Victor
 */
public class Performance extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = -7713734690619344373L;
	/** Creates new form performance */
    public Performance() {
        tests = new ArrayList<Test>();
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btNuevoTest = new javax.swing.JButton();
        btFinalizar = new javax.swing.JButton();
        btExportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btAvanzar = new javax.swing.JButton();
        btSensar = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jsGrados = new javax.swing.JSpinner();

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btNuevoTest.setText("Nuevo Test");
        btNuevoTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNuevoTestActionPerformed(evt);
            }
        });

        btFinalizar.setText("Finalizar Test");
        btFinalizar.setEnabled(false);
        btFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFinalizarActionPerformed(evt);
            }
        });

        btExportar.setText("Exportar");
        btExportar.setEnabled(false);

        jTable1.setModel(modeloTabla);
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 248));

        btAvanzar.setText("Avanzar");
        btAvanzar.setEnabled(false);
        btAvanzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAvanzarActionPerformed(evt);
            }
        });

        btSensar.setText("Sensar");
        btSensar.setEnabled(false);
        btSensar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSensarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/irobot.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jsGrados, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btAvanzar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btSensar, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsGrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btAvanzar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSensar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btNuevoTest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btFinalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btExportar)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNuevoTest)
                    .addComponent(btFinalizar)
                    .addComponent(btExportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btNuevoTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNuevoTestActionPerformed
        // TODO add your handling code here:
        btFinalizar.setEnabled(true);
        btSensar.setEnabled(true);
        btExportar.setEnabled(false);
        btNuevoTest.setEnabled(false);
        delta = (Integer)jsGrados.getValue();
        jsGrados.setEnabled(false);
        currentTest = new Test(idTest,itTest,delta);
        tests.add(currentTest);
        ((ModeloTablaTest)jTable1.getModel()).agregarTest(currentTest);
    }//GEN-LAST:event_btNuevoTestActionPerformed

    private void btSensarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSensarActionPerformed
        // TODO add your handling code here:
        currentTest.setTiempoLuz(0);
        currentTest.setTiempoTacto(0);
        currentTest.setTiempoUltrasonido(0);
        ((ModeloTablaTest)jTable1.getModel()).modificarTest(currentTest, jTable1.getModel().getRowCount()-1);
//        Thread t = new Thread(new Runnable() {
//	    	public void run() {
//    			while (true){
//    				if ((clik) && (conectado)){
//    					System.out.println("conectado: "+conectado+", clik: "+clik);
//    					imprimir();
//    					moverMotores();
//    					if (jcheck.isSelected()){
//    						actualizarSensores();
//    					}
//    				}
//    				try {
//    					if (mejorado){
//    						Thread.sleep(400); //Opcion 2;
//    					} else {
//    						Thread.sleep(1); // Opcion 1;
//    					}
//						
//					} catch (InterruptedException e) {
//						e.printStackTrace();
//					}
//    			}
//    		}
//	    }, "Thread para capturar el clik del mouse en el joystick y mover los motores");
//	    t.start();
        btAvanzar.setEnabled(true);
        btSensar.setEnabled(false);
        btFinalizar.setEnabled(true);
//        itTest++;
    }//GEN-LAST:event_btSensarActionPerformed

    private void btAvanzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAvanzarActionPerformed
        // TODO add your handling code here:
        itTest++;
        btAvanzar.setEnabled(false);
        btSensar.setEnabled(true);
//        Motor.A.rotate(delta);
//        Motor.B.rotate(delta);
        currentTest = new Test(idTest,itTest,delta);
        tests.add(currentTest);
    }//GEN-LAST:event_btAvanzarActionPerformed

    private void btFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFinalizarActionPerformed
        // TODO add your handling code here:
        idTest++;
        btNuevoTest.setEnabled(true);
        btFinalizar.setEnabled(false);
        btAvanzar.setEnabled(false);
        btSensar.setEnabled(false);
        btExportar.setEnabled(true);
    }//GEN-LAST:event_btFinalizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAvanzar;
    private javax.swing.JButton btExportar;
    private javax.swing.JButton btFinalizar;
    private javax.swing.JButton btNuevoTest;
    private javax.swing.JButton btSensar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner jsGrados;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    private List<Test> tests;
    private Test currentTest;
    private int idTest=1;
    private int itTest=1;
    private int delta=0;
    
    private ModeloTablaTest modeloTabla;
    public class ModeloTablaTest implements TableModel
    {
            final String[] columnNames = { "Test", "It", "Delta Grados", "Motores", "Tacto", "Ultrasonido", "Luz" };

            /** Lista con los datos. Cada elemento de la lista es una instancia de
             * Test */
            private List<Test> datos;

            /** Lista de suscriptores. El JTable será un suscriptor de este modelo de
             * datos */
            private Vector listeners;


            public ModeloTablaTest ()
            {
                this.datos = new ArrayList<Test>();
                this.listeners = new Vector();
            }


            public int getColumnCount() {
                    // Devuelve el número de columnas del modelo, que coincide con el
                    // número de datos que tenemos de cada Test.
                    return 7;
            }

            /** Returns the number of rows in the model. A
             * <code>JTable</code> uses this method to determine how many rows it
             * should display.  This method should be quick, as it
             * is called frequently during rendering.
             *
             * @return the number of rows in the model
             * @see #getColumnCount
             *
             */
            public int getRowCount() {
                    // Devuelve el número de personas en el modelo, es decir, el número
                    // de filas en la tabla.
                    if (datos == null)
                    {
                            return 0;
                    }
                    return datos.size();
            }

            /** Returns the value for the cell at <code>columnIndex</code> and
             * <code>rowIndex</code>.
             *
             * @param	rowIndex	the row whose value is to be queried
             * @param	columnIndex 	the column whose value is to be queried
             * @return	the value Object at the specified cell
             *
             */
            public Object getValueAt(int rowIndex, int columnIndex) {
                    Test unTest;

                    // Se obtiene el test de la fila indicada
                    unTest = (Test)(datos.get(rowIndex));

                    // Se obtiene el campo apropiado según el valor de columnIndex
                    switch (columnIndex)
                    {
                            case 0:
                                    return unTest.getIdTest();
                            case 1:
                                    return unTest.getIdTest();
                            case 2:
                                    return unTest.getDeltaGrados();
                            case 3:
                                    return unTest.getGradosMotores();
                            case 4: 
                                return (unTest.getTiempoTacto());
                            case 5:
                                return (unTest.getTiempoUltrasonido());
                            case 6:
                                return (unTest.getTiempoLuz());
                            default:
                                    return null;
                    }
            }

            /**
             * Borra del modelo el test en la fila indicada 
             */
            public void borraTest (int fila)
            {
                    // Se borra la fila 
                    datos.remove(fila);

                    // Y se avisa a los suscriptores, creando un TableModelEvent...
                    TableModelEvent evento = new TableModelEvent (this, fila, fila, 
                            TableModelEvent.ALL_COLUMNS, TableModelEvent.DELETE);

                    // ... y pasándoselo a los suscriptores
                    avisaSuscriptores (evento);
            }

            /**
             * Añade un test al final de la tabla
             */
            public void agregarTest ()
            {
                    // Avisa a los suscriptores creando un TableModelEvent...
                    if (datos==null){
                            datos = new ArrayList<Test>();
                    }
                    TableModelEvent evento;
                    evento = new TableModelEvent (this, this.getRowCount()-1,
                            this.getRowCount()-1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.INSERT);

                    // ... y avisando a los suscriptores
                    avisaSuscriptores (evento);
            }

            public void agregarTest (Test nuevoTest)
            {
                    // Añade el test al modelo 
                    datos.add (nuevoTest);

                    // Avisa a los suscriptores creando un TableModelEvent...
                    TableModelEvent evento;
                    evento = new TableModelEvent (this, this.getRowCount()-1,
                            this.getRowCount()-1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.INSERT);

                    // ... y avisando a los suscriptores
                    avisaSuscriptores (evento);
            }

            public void borraTest (Test unTest)
            {
                    // Elimina el Test del modelo 
                    datos.remove(unTest);

                    // Avisa a los suscriptores creando un TableModelEvent...
                    TableModelEvent evento;
                    /*
                    evento = new TableModelEvent (this, this.getRowCount()+1,
                            this.getRowCount()+1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.DELETE);
                    */		
                    evento = new TableModelEvent (this, this.getRowCount()-1,
                            this.getRowCount()-1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.DELETE);

                    // ... y avisando a los suscriptores
                    avisaSuscriptores (evento);
            }

            public void borraTest ()
            {

                    // Avisa a los suscriptores creando un TableModelEvent...
                    TableModelEvent evento;
                    /*
                    evento = new TableModelEvent (this, this.getRowCount()+1,
                            this.getRowCount()+1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.DELETE);
                    */		
                    evento = new TableModelEvent (this, this.getRowCount()-1,
                            this.getRowCount()-1, TableModelEvent.ALL_COLUMNS,
                            TableModelEvent.DELETE);

                    // ... y avisando a los suscriptores
                    avisaSuscriptores (evento);
            }

        public void modificarTest(Test unTest, int fila){
            datos.set(fila, unTest);//add(fila,unTest);

            //Avisa a los suscriptores creando un TableModelEvent...
             TableModelEvent evento;
             evento = new TableModelEvent (this, this.getRowCount()-1,
                     this.getRowCount()-1,TableModelEvent.ALL_COLUMNS, TableModelEvent.UPDATE);

             // ... y avisando a los suscriptores
             avisaSuscriptores (evento);
        }

//        public void modificarTest(){
//
//                //Avisa a los suscriptores creando un TableModelEvent...
//                datos = new ArrayList<Test>();
//                 TableModelEvent evento;
//                 evento = new TableModelEvent (this, this.getRowCount()-1,
//                         this.getRowCount()-1, TableModelEvent.ALL_COLUMNS, TableModelEvent.UPDATE);
//
//                 // ... y avisando a los suscriptores
//                 avisaSuscriptores (evento);
//        }
        
        /** Adds a listener to the list that is notified each time a change
         * to the data model occurs.
         * @param	l		the TableModelListener
         */
        public void addTableModelListener(TableModelListener l) {
                // Añade el suscriptor a la lista de suscriptores
                listeners.add (l);
        }

        /** Returns the most specific superclass for all the cell values
         * in the column.  This is used by the <code>JTable</code> to set up a
         * default renderer and editor for the column.
         * @param columnIndex  the index of the column
         * @return the common ancestor class of the object values in the model.
         */
        public Class getColumnClass(int columnIndex) {
                // Devuelve la clase que hay en cada columna.
                switch (columnIndex)
                {
                        case 0:
                                return Integer.class;
                        case 1: 
                                return Integer.class;
                        case 2: 
                                return Integer.class;
                        case 3:
                                return Float.class;
                        case 4:
                                return Float.class;
                        case 5:
                                return Float.class;
                        case 6:
                                return Float.class;
                        default:
                                return Object.class;
                }
        }

        /** Returns the name of the column at <code>columnIndex</code>.  This is used
         * to initialize the table's column header name.  Note: this name does
         * not need to be unique; two columns in a table can have the same name.
         * @param	columnIndex	the index of the column
         * @return  the name of the column
         */
        public String getColumnName(int columnIndex) 
        {
                // Devuelve el nombre de cada columna. Este texto aparecerá en la
                // cabecera de la tabla.
                switch (columnIndex)
                {
                        case 0:
                                return "Test";
                        case 1:
                                return "It";
                        case 2:
                                return "Delta Gerados";
                        case 3:
                                return "Motores";
                        case 4:
                                return "Tacto";
                        case 5:
                                return "Ultrasonido";
                        case 6:
                                return "Luz";
                        default:
                                return null;
                }
        }

        /** Returns true if the cell at <code>rowIndex</code> and
         * <code>columnIndex</code>
         * is editable.  Otherwise, <code>setValueAt</code> on the cell will not
         * change the value of that cell.
         * @param	rowIndex	the row whose value to be queried
         * @param	columnIndex	the column whose value to be queried
         * @return	true if the cell is editable
         * @see #setValueAt
         */
        public boolean isCellEditable(int rowIndex, int columnIndex) {
                // Permite que la celda sea editable.
                return false;
        }

        /** Removes a listener from the list that is notified each time a
         * change to the data model occurs.
         *
         * @param	l		the TableModelListener
         *
         */
        public void removeTableModelListener(TableModelListener l) {
                // Elimina los suscriptores.
                listeners.remove(l);
        }

        /** Sets the value in the cell at <code>columnIndex</code> and
         * <code>rowIndex</code> to <code>aValue</code>.
         * @param	aValue		 the new value
         * @param	rowIndex	 the row whose value is to be changed
         * @param	columnIndex 	 the column whose value is to be changed
         * @see #getValueAt
         * @see #isCellEditable
         */
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) 
        {
                // Obtiene el Test de la fila indicada
                Test unTest;
                unTest = (Test)(datos.get(rowIndex));

                // Cambia el campo de Test que indica columnIndex, poniendole el 
                // aValue que se nos pasa.
                switch (columnIndex)
                {
                        case 0:
                                unTest.setIdTest((Integer)aValue);
                                break;
                        case 1:
                                unTest.setIt((Integer)aValue);//(Integer.parseInt(String.valueOf((Integer)aValue)));
                                break;
                        case 2:
                                unTest.setDeltaGrados((Integer)aValue);
                                break;
                        case 3:
                                unTest.setGradosMotores((Float)aValue);
                                break;
                        case 4:
                                unTest.setTiempoTacto((Float)aValue);
                                break;
                        case 5:
                                unTest.setTiempoUltrasonido((Float)aValue);
                                break;
                        case 6:
                                unTest.setTiempoLuz((Float)aValue);
                                break;
                        default:
                                break;
                }

                // Avisa a los suscriptores del cambio, creando un TableModelEvent ...
                TableModelEvent evento = new TableModelEvent (this, rowIndex, rowIndex, 
                        columnIndex);

                // ... y pasándoselo a los suscriptores.
                avisaSuscriptores (evento);
        }

        /**
         * Pasa a los suscriptores el evento.
         */
        private void avisaSuscriptores (TableModelEvent evento)
        {
                int i;

                // Bucle para todos los suscriptores en la lista, se llama al metodo
                // tableChanged() de los mismos, pasándole el evento.
                for (i=0; i<listeners.size(); i++)
                        ((TableModelListener)listeners.get(i)).tableChanged(evento);
        }

        public Test darTest(int fila){
                return (Test)this.datos.get(fila);
        }

//        //public Object
//        public void actualizar(){
//                datos=this.sistema.listarAlumnos(turno);
//                //Avisa a los suscriptores creando un TableModelEvent...
//                         TableModelEvent evento;
//                         evento = new TableModelEvent (this, this.getRowCount()-1,
//                                 this.getRowCount()-1,TableModelEvent.ALL_COLUMNS,
//                                 TableModelEvent.UPDATE);
//                         // ... y avisando a los suscriptores
//                         avisaSuscriptores (evento);
//        }

    }
}
